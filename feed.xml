<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://josh-ops.com</id><title>josh-ops</title><subtitle>Blogging about Azure DevOps and GitHub practices, tips, and my continuous improvement DevOps journey.</subtitle> <updated>2021-06-23T11:19:26-05:00</updated> <author> <name>Josh Johanning</name> <uri>https://josh-ops.com</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://josh-ops.com" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator> <rights> © 2021 Josh Johanning </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Tokenizing Angular Environment Configuration in Azure DevOps</title><link href="https://josh-ops.com/posts/angular-tokenization/" rel="alternate" type="text/html" title="Tokenizing Angular Environment Configuration in Azure DevOps" /><published>2021-06-17T18:30:00-05:00</published> <updated>2021-06-23T11:18:56-05:00</updated> <id>https://josh-ops.com/posts/angular-tokenization/</id> <content src="https://josh-ops.com/posts/angular-tokenization/" /> <author> <name>Josh Johanning</name> </author> <category term="Azure DevOps" /> <category term="Pipelines" /> <summary> Overview I was working with a team that had an Angular front-end application and I was tasked with improving their CI/CD process. They had some automated pipelines, but they were running a build before each environment by running a different npm run build -- --configuration &amp;lt;env&amp;gt; command. My co-worker Colin Dembovsky summarizes it well in a similar post for .NET Core: The Build Once ... </summary> </entry> <entry><title>So You Want to Migrate Trac Tickets to GitHub Issues</title><link href="https://josh-ops.com/posts/trac-to-github/" rel="alternate" type="text/html" title="So You Want to Migrate Trac Tickets to GitHub Issues" /><published>2021-01-25T08:30:00-06:00</published> <updated>2021-01-25T08:30:00-06:00</updated> <id>https://josh-ops.com/posts/trac-to-github/</id> <content src="https://josh-ops.com/posts/trac-to-github/" /> <author> <name>Josh Johanning</name> </author> <category term="GitHub" /> <summary> Disclaimer I should first off state that I wouldn’t entirely recommend this, if you are migrating to GitHub for the first time, you should try to start off with a blank slate. Keep the old tickets in Trac or the database around for a period in time in case you need to reference, but don’t migrate the entire Trac ticket repository. I could understand wanting to port in active tickets, though, w... </summary> </entry> <entry><title>Azure DevOps: Bulk Reparent Work Items</title><link href="https://josh-ops.com/posts/reparent-work-items/" rel="alternate" type="text/html" title="Azure DevOps: Bulk Reparent Work Items" /><published>2021-01-17T16:30:00-06:00</published> <updated>2021-01-17T16:30:00-06:00</updated> <id>https://josh-ops.com/posts/reparent-work-items/</id> <content src="https://josh-ops.com/posts/reparent-work-items/" /> <author> <name>Josh Johanning</name> </author> <category term="Azure DevOps" /> <summary> Reparent Work Items in the UI If you are reparenting only a few work items, then the easiest way is to use the Mapping view in the Azure DevOps backlog, as described by Microsoft: Reparent Work Items with a Script However, mapping (or reparenting) work items in the Azure DevOps UI can be a little clunky - it can be done in mass using the parent mapping pane, but what if you have hundreds ... </summary> </entry> <entry><title>Authorize and Restore Azure Artifacts NuGet Packages in GitHub Actions</title><link href="https://josh-ops.com/posts/authorize-azure-artifacts-in-github-actions/" rel="alternate" type="text/html" title="Authorize and Restore Azure Artifacts NuGet Packages in GitHub Actions" /><published>2021-01-04T14:15:00-06:00</published> <updated>2021-01-17T17:12:16-06:00</updated> <id>https://josh-ops.com/posts/authorize-azure-artifacts-in-github-actions/</id> <content src="https://josh-ops.com/posts/authorize-azure-artifacts-in-github-actions/" /> <author> <name>Josh Johanning</name> </author> <category term="GitHub" /> <category term="DevOps" /> <summary> Summary I needed to be able to restore my NuGet packages hosted in an Azure Artifacts instance in a GitHub Action workflow. In Azure Pipelines, it’s relatively simple with the Restore NuGet Packages task. However, there is not really an equivalent native Action to be able to add to the workflow to accomplish this. I tried this 3rd party Action titled shubham90-nugetauth, but couldn’t really g... </summary> </entry> <entry><title>Quickly Migrate NuGet Packages to a New Feed En Masse</title><link href="https://josh-ops.com/posts/nuget-pusher-script/" rel="alternate" type="text/html" title="Quickly Migrate NuGet Packages to a New Feed En Masse" /><published>2020-12-23T16:45:00-06:00</published> <updated>2021-01-26T12:19:27-06:00</updated> <id>https://josh-ops.com/posts/nuget-pusher-script/</id> <content src="https://josh-ops.com/posts/nuget-pusher-script/" /> <author> <name>Josh Johanning</name> </author> <category term="Azure DevOps" /> <summary> Summary This is a very simple bash script that can assist you in migrating NuGet packages to a different Artifact feed. It’s written with Azure DevOps in mind as a target, but there’s no reason why you couldn’t use any other artifact feed as a destination. I used the script after I ran a NuGet restore locally of a Visual Studio solution, found my .NuGet folder with all of the cached packages,... </summary> </entry> </feed>
